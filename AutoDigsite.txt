getgenv().autoDigsiteConfig = {
    DIGSITE_RESET_DELAY = 10, -- Amount of time in seconds to wait before starting the script back up after the digsite resets
    LOAD_DELAY = 5,
    CHEST_BREAK_DELAY = 0.1, -- Amount of time in seconds to wait before breaking a chest
    DIG_DEPTH = 1,
    UNBROKEN_BLOCK_THRESHOLD = 50
}

local digsiteReset = false

local positions = {
    [1] = Vector3.new(10, 1, 10),

}

local function checkForChests()
    for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active.Digsite.Important.ActiveChests:GetChildren()) do
        if v:IsA("Model") then
            pcall(function()
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Top.CFrame
                task.wait(getgenv().autoDigsiteConfig.CHEST_BREAK_DELAY)
                game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("Digsite", "DigChest", v:GetAttribute('Coord'))
                v:Destroy()
                task.wait()
            end)
        end
    end
end



local function beginCycle()
    for curPos, _ in positions do
        for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active.Digsite.Important.ActiveBlocks:GetChildren()) do
            if v:IsA("Part") then
                if (v:GetAttribute("Coord") - positions[curPos]).Magnitude == 0 then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 3, 0)

                    local counter = 0
                    local function digBlock(depth)

                        if counter < getgenv().autoDigsiteConfig.UNBROKEN_BLOCK_THRESHOLD then

                            local block
                            for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active.Digsite.Important.ActiveBlocks:GetChildren()) do
                                if v:IsA("BasePart") then
                                    if (v:GetAttribute("Coord") - (positions[curPos] + Vector3.new(0, depth, 0))).Magnitude == 0 then
                                        block = v
                                    end
                                end
                            end

                            if block then
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = block.CFrame + Vector3.new(0, 3, 0)
                                game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("Digsite", "DigBlock", block:GetAttribute('Coord'))
                                task.wait()
                                counter = counter + 1
                                checkForChests(depth)
                                digBlock(depth)
                            end

                        else
                            counter = 0
                        end
                    end


                    for i = 0, getgenv().autoDigsiteConfig.DIG_DEPTH do
                        checkForChests(i)
                        digBlock(i)
                        task.wait()
                    end
                end
            end
        end
    end
    print("Finished Cycle... Digging until reset")

    while not digsiteReset do
        for _, v in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active.Digsite.Important.ActiveBlocks:GetChildren()) do
            if v:IsA("Part") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 3, 0)

                local counter = 0
                local function digBlock()

                    if counter < getgenv().autoDigsiteConfig.UNBROKEN_BLOCK_THRESHOLD then

                        local block
                        for _, v2 in pairs(game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active.Digsite.Important.ActiveBlocks:GetChildren()) do
                            if v2:IsA("BasePart") then
                                if v2 == v then
                                    block = v2
                                end
                            end
                        end

                        if block then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = block.CFrame + Vector3.new(0, 3, 0)
                            game:GetService("ReplicatedStorage").Network:WaitForChild("Instancing_FireCustomFromClient"):FireServer("Digsite", "DigBlock", block:GetAttribute('Coord'))
                            task.wait()
                            counter = counter + 1
                            checkForChests()
                            digBlock()
                        end

                    else
                        counter = 0
                    end
                end

                checkForChests()
                digBlock()
                task.wait()
            end
        end
    end
    digsiteReset = false
end



task.spawn(function()
    while #game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active.Digsite.Important.ActiveBlocks:GetChildren() > 336 do -- MAX WILL BE 336

        task.wait()
    end
    digsiteReset = true
    print("Digsite Reset")
    task.wait(getgenv().autoDigsiteConfig.DIGSITE_RESET_DELAY)
    beginCycle()
end)

require(game:GetService("ReplicatedStorage").Library.Client.WorldFX).AnimateChest = function(...)
    return
end

for _, lootbag in pairs(game:GetService("Workspace").__THINGS:FindFirstChild("Lootbags"):GetChildren()) do
    if lootbag then
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
        lootbag:Destroy()
        task.wait()
    end
end

game:GetService("Workspace").__THINGS:FindFirstChild("Lootbags").ChildAdded:Connect(function(lootbag)
    task.wait()
    if lootbag then
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
        lootbag:Destroy()
    end
end)

game:GetService("Workspace").__THINGS:FindFirstChild("Orbs").ChildAdded:Connect(function(orb)
    task.wait()
    if orb then
        game:GetService("ReplicatedStorage").Network:FindFirstChild("Orbs: Collect"):FireServer(unpack( { [1] = { [1] = tonumber(orb.Name), }, } ))
        orb:Destroy()
    end
end)

beginCycle()
